package test;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.net.URL;
import javax.imageio.ImageIO;

/**
 *
 * @author leo
 */
public class View extends javax.swing.JFrame implements MouseMotionListener {

    private BufferStrategy bs;
    private Graphics2D g;
    private BufferedImage background;
    private BufferedImage tree;
    private BufferedImage tree2;
    private BufferedImage car;

    /**
     * Creates new form View
     */
    public View() {
        initComponents();
        setSize(800, 600);
        setLocationRelativeTo(null);
        
        createBufferStrategy(3);
        bs = getBufferStrategy();
        g = (Graphics2D) bs.getDrawGraphics();

        
        try {
            URL urlImg=getClass().getResource("/test/background.png");
            background = ImageIO.read(urlImg);
            
            urlImg=getClass().getResource("/test/tree.png");
            tree = ImageIO.read(urlImg);

            urlImg=getClass().getResource("/test/tree2.png");
            tree2 = ImageIO.read(urlImg);

            urlImg=getClass().getResource("/test/car.png");
            car = ImageIO.read(urlImg);
        }
        catch (Exception e) { }
        
        Thread mainLoop = new Thread(new MainLoop());
        mainLoop.start();
        
        addMouseMotionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables



    private class MainLoop implements Runnable {

        @Override
        public void run() {
            while (true) {
                g = (Graphics2D) bs.getDrawGraphics();
                update();
                draw(g);
                bs.show();
                g.dispose();
            }
        }
    }

    int track = 0;
    double a = 0;
    double cf = 0;
    double ha = 0;
    double backgroundx=0;
    
    public void update() {
        a += 0.15d;
        if (a>=1) {
            a=0;
            track++;
        }
        //cf += 0.05d;
        //if (cf > 10) {
        //    cf = 10;
        //}
        
        backgroundx=backgroundx+(cf * 0.03);
        
        ha = 0.5d;
        if (ha >= 0) {
            ha = 0;
        }
    }

    public void draw(Graphics2D g) {
        //g.setBackground(Color.BLUE);
        //g.clearRect(0, 0, getWidth(), getHeight());
        g.scale(2, 2.2);
        g.drawImage(background, (int) -backgroundx, 0, this);
        
        g.scale(0.5, 1/2.2);
        g.translate(getWidth() / 2, getHeight() / 2);
        
        Point previous = null;
        int previousCurve = 0;
        for (int z = 159; z > 0; z--) {
            int x = (int) (1200 / (z - a));
            int y = (int) ((500 - (z - a) * ha) / (z - a));
            int curva = (int) ((z - a) * cf);
            //g.setColor(Color.RED);
            //g.fillOval(x + curva, y, 5, 5);
            //g.fillOval(-x + curva, y, 5, 5);
            //g.drawLine(-x + curva, y, x + curva, y);
            if (previous == null) {
                previous = new Point(x, y);
            }
            else {
                Polygon poly = new Polygon();
                poly.addPoint(-previous.x + previousCurve, previous.y);
                poly.addPoint(previous.x + previousCurve, previous.y);
                poly.addPoint(x + curva, y);
                poly.addPoint(-x + curva, y);
                
                if ((z+track) % 2 == 0) {
                    g.setColor(new Color(0, 110, 0));
                }
                else {
                    g.setColor(new Color(0, 120, 0));
                }
                g.fillRect(-getWidth()/2, previous.y, getWidth(), y-previous.y);
                
                if ((z+track) % 2 == 0) {
                    g.setColor(new Color(140, 140, 140));
                }
                else {
                    g.setColor(new Color(160, 160, 160));
                }
                g.fillPolygon(poly);
                previous.setLocation(x, y);
                
                if ((z+track) % 13 == 0) {
                    int xtree = (int) (1300 / (z - a)); 
                    int widthTree = (int) (tree.getWidth() / (z-a) * 12);
                    int heightTree = (int) (tree.getHeight() / (z-a) * 12);
                    g.drawImage(tree, xtree + curva, (int) previous.y - heightTree, widthTree, heightTree, this);
                    g.drawImage(tree, - xtree - widthTree + curva, (int) previous.y - heightTree, widthTree, heightTree, this);
                }

                if ((z+track) % 15 == 1) {
                    int xtree = (int) (4000 / (z - a)); 
                    int widthTree = (int) (tree.getWidth() / (z-a) * 6);
                    int heightTree = (int) (tree.getHeight() / (z-a) * 6);
                    g.drawImage(tree2, xtree + curva, (int) previous.y - heightTree, widthTree, heightTree, this);
                    g.drawImage(tree2, - xtree - widthTree + curva, (int) previous.y - heightTree, widthTree, heightTree, this);
                }
            }
            previousCurve = curva;
        }

        g.drawImage(car, -200, 150+(int)(Math.random()*3)-1, car.getWidth()*4, car.getHeight()*4, this);
        
        g.setColor(Color.BLUE);
        g.drawString("Track: "+track, 50-getWidth()/2, 50-getHeight()/2);
    }


    @Override
    protected void processKeyEvent(KeyEvent ke) {
    }

    @Override
    public void mouseDragged(MouseEvent e) {
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        cf = 20 * ( (e.getX()-getWidth()/2.0) / (getWidth()/2.0));
    }    
    
}
